#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5 // number of philosophers
#define LEFT (i + N - 1) % N // index of left neighbor
#define RIGHT (i + 1) % N // index of right neighbor

enum state_t { THINKING, HUNGRY, EATING }; // possible states for a philosopher

enum state_t state[N]; // array of current states for all philosophers
pthread_mutex_t mutex; // mutex to protect access to state array
sem_t sem[N]; // one semaphore per philosopher

void think(int i) {
  printf("Philosopher %d is thinking...\n", i);
  sleep(rand() % 5 + 1); // think for a random time between 1 and 5 seconds
}

void eat(int i) {
  printf("Philosopher %d is eating...\n", i);
  sleep(rand() % 5 + 1); // eat for a random time between 1 and 5 seconds
}

void test(int i) {
  if (state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING) {
    state[i] = EATING;
    sem_post(&sem[i]); // signal the philosopher i to start eating
  }
}

void take_forks(int i) {
  pthread_mutex_lock(&mutex); // enter critical section
  state[i] = HUNGRY; // set current state to hungry
  test(i); // check if philosopher can start eating
  pthread_mutex_unlock(&mutex); // leave critical section
  sem_wait(&sem[i]); // wait for signal to start eating
}

void put_forks(int i) {
  pthread_mutex_lock(&mutex); // enter critical section
  state[i] = THINKING; // set current state to thinking
  test(LEFT); // check if left neighbor can start eating
  test(RIGHT); // check if right neighbor can start eating
  pthread_mutex_unlock(&mutex); // leave critical section
}

void* philosopher(void* arg) {
  int i = *((int*) arg);
  while (1) {
    think(i);
    take_forks(i);
    eat(i);
    put_forks(i);
  }
}

int main() {
  pthread_t tid[N];
  int i;

  pthread_mutex_init(&mutex, NULL);
  for (i = 0; i < N; i++) {
    sem_init(&sem[i], 0, 0);
    state[i] = THINKING;
  }

  for (i = 0; i < N; i++) {
    int* arg = malloc(sizeof(*arg));
    *arg = i;
    pthread_create(&tid[i], NULL, philosopher, arg);
  }

  for (i = 0; i < N; i++) {
    pthread_join(tid[i], NULL);
  }

  return 0;
}
